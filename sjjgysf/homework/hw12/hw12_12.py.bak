# æ‡¿Î≥°
def findDistance(nums):
	m = len(nums)
	n = len(nums[0])
	def bfs(i,j,nums,distance):
		a = [(i,j,0)]
		ptr = 0
		#direc = [[0,1],[0,-1],[1,0],[-1,0]]
		while(ptr < len(a)):
			ii,jj,step = a[ptr]
			if nums[ii][jj] == 0:
				distance[i][j] = step
				return
			res = m*n
			if ii - 1 >= 0:
				if distance[ii-1][jj]:
					res = min(res,distance[ii-1][jj])
				else:
					a.append((ii - 1,jj,step + 1))
			if jj - 1 >= 0:
				if distance[ii][jj - 1]:
					res = min(res,distance[ii][jj - 1])
				else:
					a.append((ii,jj - 1,step + 1))
			if ii + 1 < m:
				if distance[ii + 1][jj]:
					res = min(res,distance[ii + 1][jj])
				else:
					a.append((ii + 1,jj,step + 1))
			if jj + 1 < n:
				if distance[ii][jj + 1]:
					res = min(res,distance[ii][jj + 1])
				else:
					a.append((ii,jj + 1,step + 1))
			ptr += 1
	distance = [[0]*n for _ in range(m)]
	for i in range(m):
		for j in range(n):
			if nums[i][j] == 0:
				continue
			bfs(i,j,nums,distance)
	print(distance)
nums = [[0,0,0],[0,1,0],[1,1,1]]
findDistance(nums)
	